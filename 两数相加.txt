/**
给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
*/
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
    let add = new ListNode(-1);
    let carry = 0;
    let addr =add;
    while(l1!==null || l2!==null){
        let num1 = l1==null ? 0 : l1.val;
        let num2 = l2==null ? 0 : l2.val;
        let sum = num1+num2+carry;
        carry = sum>=10?1:0;
        addr.next =new ListNode(sum%10);
        addr = addr.next;
        if(l1!=null){
            l1 = l1.next;
        }
        if(l2!=null){
          l2 = l2.next; 
        }
    }
    if (carry === 1) {
        addr.next = new ListNode(1);
    }
  
    return add.next;
    
    
};